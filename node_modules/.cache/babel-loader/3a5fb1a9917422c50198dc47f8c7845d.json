{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\19523\\\\Documents\\\\noteful2\\\\src\\\\components\\\\NotesContainer\\\\Folders\\\\NotesByFolder.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass NotesByFolder extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchNotesByFolderId = () => {\n      const folder_id = this.props.match.params.id;\n      console.log(folder_id);\n      fetch(\"/notes/folder/\".concat(folder_id)).then(resp => {\n        if (!resp.ok) return resp.json().then(e => Promise.reject(e));\n        return resp.json();\n      }).then(data => {\n        this.setState({\n          notes: data\n        });\n      }).catch(error => {\n        console.error({\n          error\n        });\n      });\n    };\n\n    this.state = {\n      notes: []\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.match.params.id.folder_id !== prevProps.match.params.id.folder_id) {\n      this.fetchNotesByFolderId();\n    }\n  }\n\n  componentDidMount() {\n    this.fetchNotesByFolderId();\n  }\n\n  render() {\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"hi\", this.state.notes.map(note => React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, note.note_name)));\n  }\n\n}\n\nNotesByFolder.propTypes = {};\nexport default NotesByFolder;","map":{"version":3,"sources":["C:\\Users\\19523\\Documents\\noteful2\\src\\components\\NotesContainer\\Folders\\NotesByFolder.js"],"names":["React","Component","PropTypes","NotesByFolder","constructor","props","fetchNotesByFolderId","folder_id","match","params","id","console","log","fetch","then","resp","ok","json","e","Promise","reject","data","setState","notes","catch","error","state","componentDidUpdate","prevProps","componentDidMount","render","map","note","note_name","propTypes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,aAAN,SAA4BF,SAA5B,CAAsC;AAClCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAOnBC,oBAPmB,GAOI,MAAM;AACzB,YAAOC,SAAS,GAAG,KAAKF,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBC,EAA3C;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACAM,MAAAA,KAAK,yBAAkBN,SAAlB,EAAL,CACGO,IADH,CACSC,IAAD,IAAU;AACd,YAAI,CAACA,IAAI,CAACC,EAAV,EACE,OAAOD,IAAI,CAACE,IAAL,GAAYH,IAAZ,CAAiBI,CAAC,IAAIC,OAAO,CAACC,MAAR,CAAeF,CAAf,CAAtB,CAAP;AACF,eAAOH,IAAI,CAACE,IAAL,EAAP;AACD,OALH,EAMGH,IANH,CAMQO,IAAI,IAAI;AACZ,aAAKC,QAAL,CAAc;AACZC,UAAAA,KAAK,EAAEF;AADK,SAAd;AAID,OAXH,EAYGG,KAZH,CAYSC,KAAK,IAAI;AACdd,QAAAA,OAAO,CAACc,KAAR,CAAc;AAAEA,UAAAA;AAAF,SAAd;AACD,OAdH;AAeD,KAzBgB;;AAEf,SAAKC,KAAL,GAAY;AACRH,MAAAA,KAAK,EAAE;AADC,KAAZ;AAGH;;AAsBCI,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAI,KAAKvB,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBC,EAAxB,CAA2BH,SAA3B,KAAyCqB,SAAS,CAACpB,KAAV,CAAgBC,MAAhB,CAAuBC,EAAvB,CAA0BH,SAAvE,EAAkF;AAChF,WAAKD,oBAAL;AACD;AACF;;AACDuB,EAAAA,iBAAiB,GAAG;AAClB,SAAKvB,oBAAL;AACD;;AAEHwB,EAAAA,MAAM,GAAG;AACPnB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKc,KAAjB;AACE,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACT,KAAKA,KAAL,CAAWH,KAAX,CAAiBQ,GAAjB,CAAqBC,IAAI,IAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,IAAI,CAACC,SAAV,CADC,CADS,CADJ;AAQH;;AA/CiC;;AAkDtC9B,aAAa,CAAC+B,SAAd,GAA0B,EAA1B;AAIA,eAAe/B,aAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass NotesByFolder extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            notes: [],\r\n        }\r\n    }\r\n\r\n    fetchNotesByFolderId = () => {\r\n        const  folder_id = this.props.match.params.id;\r\n        console.log(folder_id)\r\n        fetch(`/notes/folder/${folder_id}`)\r\n          .then((resp) => {\r\n            if (!resp.ok)\r\n              return resp.json().then(e => Promise.reject(e));\r\n            return resp.json();\r\n          })\r\n          .then(data => {\r\n            this.setState({\r\n              notes: data\r\n            })\r\n\r\n          })\r\n          .catch(error => {\r\n            console.error({ error });\r\n          });\r\n      }\r\n    \r\n      componentDidUpdate(prevProps) {\r\n        if (this.props.match.params.id.folder_id !== prevProps.match.params.id.folder_id) {\r\n          this.fetchNotesByFolderId();\r\n        }\r\n      }\r\n      componentDidMount() {\r\n        this.fetchNotesByFolderId();\r\n      }\r\n\r\n    render() {\r\n      console.log(this.state)\r\n        return (\r\n            <div>\r\nhi{this.state.notes.map(note =>\r\n  <h2>{note.note_name}</h2>\r\n  \r\n  )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nNotesByFolder.propTypes = {\r\n\r\n};\r\n\r\nexport default NotesByFolder;"]},"metadata":{},"sourceType":"module"}