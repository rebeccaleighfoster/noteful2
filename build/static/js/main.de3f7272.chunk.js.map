{"version":3,"sources":["components/MyContext.js","components/NotesContainer/Folders/index.js","components/ErrorBoundary.js","components/NotesContainer/index.js","components/NoteInfo.js","components/AddFolder/index.js","components/AddNote/AddNote.js","App.js","serviceWorker.js","index.js"],"names":["MyContext","React","createContext","Folders","ListGroup","Consumer","context","console","log","folders","map","folder","ListGroupItem","key","name","to","id","className","type","onClick","deleteFolder","Component","ErrorBoundary","props","state","hasError","this","children","error","NotesContainer","prevProps","match","params","setFolderId","timestamp","Date","now","notes","note","note_name","Intl","DateTimeFormat","year","month","day","hour","minute","second","format","deleteNote","contextType","NoteInfo","noteId","fetch","then","res","json","setState","catch","content","AddFolder","handleAddFolder","event","preventDefault","newFolder","folder_name","target","value","method","headers","body","JSON","stringify","ok","e","Promise","reject","resp","window","location","href","onSubmit","htmlFor","required","AddNote","handleAddNote","newNote","folder_id","aria-label","App","fetchNotesByFolderId","url","data","fetchFolders","foldersResponse","handleNoteDelete","handleFolderDelete","Provider","path","exact","component","Boolean","hostname","process","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAIeA,EAFGC,IAAMC,gB,gBCGHC,E,iLAEjB,OACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAUC,SAAX,KACG,SAAAC,GAEC,OADAC,QAAQC,IAAIF,GACLA,EAAQG,QAAQC,IAAI,SAAAC,GAAM,OAC7B,kBAACC,EAAA,EAAD,CAAeC,IAAKF,EAAOG,MACzB,6BACF,kBAAC,IAAD,CAAMC,GAAE,kBAAaJ,EAAOK,KAAOL,EAAOG,KAA1C,MAEA,4BACEG,UAAU,eACVC,KAAK,SACLC,QAAS,kBAAMb,EAAQc,aAAaT,KAHtC,6B,GAZqBV,IAAMoB,WCHtBC,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,UAAU,GAHC,E,sEAYf,OAAIC,KAAKF,MAAMC,SAEP,+DAGDC,KAAKH,MAAMI,Y,gDAVUC,GAC5B,MAAO,CAAEH,UAAU,O,GATgBxB,IAAMoB,WCM3CQ,E,2LAEeC,GACbA,EAAUC,MAAMC,OAAOhB,KAAOU,KAAKH,MAAMQ,MAAMC,OAAOhB,IACxDU,KAAKpB,QAAQ2B,YAAYP,KAAKH,MAAMQ,MAAMC,OAAOhB,M,+BAInD,IAAMkB,EAAYC,KAAKC,MACf9B,EAAYoB,KAAZpB,QACR,OACE,kBAAC,EAAD,KACM,yBAAKW,UAAU,UACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,MACA,kBAACL,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMG,GAAG,eACP,4BAAQG,KAAK,UAAb,iBAMN,yBAAKD,UAAU,cACb,kBAACb,EAAA,EAAD,KACGE,EAAQ+B,MAAM3B,IAAI,SAAA4B,GAAI,OACrB,kBAAC1B,EAAA,EAAD,CAAeC,IAAKyB,EAAKtB,IACvB,yBAAKH,IAAKyB,EAAKtB,IACb,kBAAC,IAAD,CAAMD,GAAE,gBAAWuB,EAAKtB,KAAOsB,EAAKC,YAEtC,iCAAO,IAAIC,KAAKC,eAAe,QAAS,CAAEC,KAAM,UAAWC,MAAO,UAAWC,IAAK,UAAWC,KAAM,UAAWC,OAAQ,UAAWC,OAAQ,YAAaC,OAAOd,GAA7J,KACA,4BACEjB,UAAU,eACVC,KAAK,SACLC,QAAS,kBAAMb,EAAQ2C,WAAWX,KAHpC,oBAOJ,kBAAC1B,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMG,GAAG,cACP,4BAAQG,KAAK,UAAb,sB,GAxCOjB,IAAMoB,WAA7BQ,EACGqB,YAAclD,EAwDR6B,QCpDMsB,E,YACnB,WAAY5B,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXc,KAAM,IAHS,E,iFAMC,IAAD,OACbA,EAAOZ,KAAKH,MAAMQ,MAAMC,OAAOoB,QAAU,KAC/CC,MAAM,+BAAD,OAAgCf,IAElCgB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GACJ,EAAKE,SAAS,CACVnB,KAAMiB,MAGbG,MAAO,SAAA9B,GACJrB,QAAQqB,MAAMA,O,+BAKT,IACHU,EAAUZ,KAAKF,MAAfc,KACR/B,QAAQC,IAAK,yBAA0B8B,GACvC,IAAMJ,EAAYC,KAAKC,MACrB,OACE,kBAAC,EAAU/B,SAAX,KACG,SAACC,GAAD,OACC,6BACE,kBAAC,IAAD,CAAMS,GAAE,KACN,6CAEF,gCAAMuB,EAAKC,UAAX,KACA,+BAAKD,EAAKqB,QAAV,KACA,iCAAO,IAAInB,KAAKC,eAAe,QAAS,CAAEC,KAAM,UAAWC,MAAO,UAAWC,IAAK,UAAWC,KAAM,UAAWC,OAAQ,UAAWC,OAAQ,YAAaC,OAAOd,GAA7J,KAEA,kBAAC,IAAD,CAAMnB,GAAE,MAOR,4BAAQE,UAAU,cAChB,6BACE,kBAAC,IAAD,CAAMF,GAAE,KAAR,iB,GA/CwBd,IAAMoB,WCTvBuC,E,2MACjBC,gBAAkB,SAACC,EAAOxD,GACxBwD,EAAMC,iBACN,IAAMC,EAAY,CAChBC,YAAaH,EAAMI,OAAOpD,KAAKqD,OAEjCd,MAAM,gCAAiC,CACrCe,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUR,KAEtBV,KAAK,SAAAC,GACJ,OAAKA,EAAIkB,GAEFlB,EAAIC,OADFD,EAAIC,OAAOF,KAAK,SAAAoB,GAAC,OAAIC,QAAQC,OAAOF,OAG9CpB,KAAK,SAACuB,GACLtE,QAAQC,IAAIqE,GACZtE,QAAQC,IAAIF,GACZwE,OAAOC,SAASC,KAAM,MAEvBtB,MAAM,SAAA9B,GACLrB,QAAQqB,MAAM,CAAEA,a,wEAIV,IAAD,OACL,OACE,kBAAC,EAAUvB,SAAX,KACG,SAACC,GAAD,OACC,0BAAMW,UAAU,eAAegE,SAAU,SAACP,GAAD,OAAO,EAAKb,gBAAgBa,EAAGpE,KACpE,0CACA,yBAAKW,UAAU,cACX,2BAAOiE,QAAQ,QAAf,QACA,2BAAOhE,KAAK,OAAOD,UAAU,OAAOH,KAAK,OAAOE,GAAG,OAAOmE,UAAQ,KAEtE,yBAAKlE,UAAU,uBACX,4BAAQC,KAAK,SAASD,UAAU,gBAAhC,SAIJ,6BACI,kBAAC,IAAD,CAAMF,GAAE,KAAR,gB,GA5CiBd,IAAMoB,WCAxB+D,E,2MACjBC,cAAgB,SAACvB,EAAOxD,GACtBwD,EAAMC,iBACN,IAAMuB,EAAU,CACd/C,UAAWuB,EAAMI,OAAOpD,KAAKqD,MAC7BR,QAASG,EAAMI,OAAOP,QAAQQ,MAC9BoB,UAAWzB,EAAMI,OAAOvD,OAAOwD,OAEjC5D,QAAQC,IAAI8E,GACZjC,MAAM,8BAA+B,CACnCe,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUc,KAEtBhC,KAAK,SAAAC,GACJ,OAAKA,EAAIkB,GAEFlB,EAAIC,OADFD,EAAIC,OAAOF,KAAK,SAAAoB,GAAC,OAAIC,QAAQC,OAAOF,OAG9CpB,KAAK,SAACuB,GACLtE,QAAQC,IAAIqE,GACZtE,QAAQC,IAAIF,GACZwE,OAAOC,SAASC,KAAO,MAGxBtB,MAAM,SAAA9B,GACLrB,QAAQqB,MAAM,CAAEA,a,wEAIV,IAAD,OACL,OACA,kBAAC,EAAUvB,SAAX,KACG,SAACC,GAAD,OACCC,QAAQC,IAAI,eAAgBF,GAC5B,0BAAMW,UAAU,aAAagE,SAAU,SAACP,GAAD,OAAO,EAAKW,cAAcX,EAAGpE,KAApE,WAEI,yBAAKW,UAAU,cACL,2BAAOiE,QAAQ,gBAAf,iBACA,4BACIjE,UAAU,eACVuE,aAAW,gBACX1E,KAAK,UACLR,EAAQG,QAAQC,IAAI,SAAAC,GAAM,OAAI,4BAAQwD,MAAOxD,EAAOK,IAAtB,IAA6BL,EAAOG,KAApC,SAG5C,yBAAKG,UAAU,cACX,2BAAOiE,QAAQ,QAAf,SAA6B5E,EAAQiC,UAArC,KACA,2BAAOrB,KAAK,OAAOD,UAAU,OAAOH,KAAK,OAAOE,GAAG,OAAOmE,UAAQ,KAEtE,yBAAKlE,UAAU,cACb,2BAAOiE,QAAQ,WAAf,cACA,2BAAOhE,KAAK,OAAOD,UAAU,UAAUH,KAAK,UAAUE,GAAG,UAAUmE,UAAQ,KAE7E,yBAAKlE,UAAU,qBACX,4BAAQC,KAAK,SAASD,UAAU,gBAAhC,SAIJ,yBAAKA,UAAU,cACb,6BACE,gCACA,kBAAC,IAAD,CAAMF,GAAE,KAAR,kB,GAhEiBd,IAAMoB,WCoI5BoE,G,kBA5Hb,WAAYlE,GAAQ,IAAD,8BACjB,4CAAMA,KAQRU,YAAc,SAACsD,GACbhF,QAAQC,IAAI+E,GACZ,EAAK9B,SAAS,CACZ8B,aACC,WACD,EAAKG,0BAdU,EAuBnBA,qBAAuB,WAAO,IACpBH,EAAc,EAAK/D,MAAnB+D,UACFI,EAAMJ,EAAS,kBAAcA,GAAd,GACrBlC,MAAM,8BAAD,OAA+BsC,IACjCrC,KAAK,SAACuB,GACL,OAAKA,EAAKJ,GAEHI,EAAKrB,OADHqB,EAAKrB,OAAOF,KAAK,SAAAoB,GAAC,OAAIC,QAAQC,OAAOF,OAE7CpB,KAAK,SAAAsC,GACN,EAAKnC,SAAS,CACZpB,MAAOuD,MAGVlC,MAAM,SAAA9B,GACLrB,QAAQqB,MAAM,CAAEA,aArCH,EAyCnBiE,aAAe,WACbxC,MAAM,iCACHC,KAAK,SAACwC,GACL,OAAKA,EAAgBrB,GAEdqB,EAAgBtC,OADdsC,EAAgBtC,OAAOF,KAAK,SAAAoB,GAAC,OAAIC,QAAQC,OAAOF,OAG1DpB,KAAK,SAAC7C,GACL,EAAKgD,SAAS,CACZhD,cAGHiD,MAAM,SAAA9B,GACLrB,QAAQqB,MAAM,CAAEA,aAtDH,EA0DnBmE,iBAAmB,SAACzD,GAClB,IAAMc,EAASd,EAAKtB,GACpBqC,MAAM,+BAAD,OAAgCD,GAAU,CAC7CgB,OAAQ,SACRC,QAAS,CACP,eAAgB,sBAGjBf,KAAK,SAAAC,GACAA,EAAIkB,KACN,EAAKoB,eACL,EAAKH,0BAGRhC,MAAM,SAAA9B,GACLrB,QAAQqB,MAAM,CAAEA,aAzEH,EA8EnBoE,mBAAqB,SAACrF,GACpB,IAAM4E,EAAY5E,EAAOK,GACzBT,QAAQC,IAAK,CAAC+E,aAAY,WAC1BlC,MAAM,iCAAD,OAAkCkC,GAAa,CAClDnB,OAAQ,SACRC,QAAS,CACP,eAAgB,sBAGnBf,KAAK,SAAAC,GACAA,EAAIkB,KACN,EAAKoB,eACL,EAAKH,0BAGRhC,MAAM,SAAA9B,GACLrB,QAAQqB,MAAM,CAAEA,aA5FlB,EAAKJ,MAAQ,CACXf,QAAS,GACT4B,MAAO,GACPkD,UAAW,MALI,E,iFAmBlB7D,KAAKmE,eACLnE,KAAKgE,yB,+BAgFI,IAAD,EACoBhE,KAAKF,MAAxBf,EADD,EACCA,QAAS4B,EADV,EACUA,MACjB,OACE,kBAAC,EAAU4D,SAAX,CACE9B,MAAO,CACL9B,QACA5B,UACAwC,WAAYvB,KAAKqE,iBACjB3E,aAAcM,KAAKsE,mBACnB/D,YAAaP,KAAKO,cAGpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiE,KAAK,IAAIC,OAAK,EAACC,UAAWvE,IACjC,kBAAC,IAAD,CAAOqE,KAAK,cAAcC,OAAK,EAACC,UAAWvE,IAC3C,kBAAC,IAAD,CAAOqE,KAAK,gBAAgBC,OAAK,EAACC,UAAWjD,IAC7C,kBAAC,IAAD,CAAO+C,KAAK,cAAcC,OAAK,EAACC,UAAWxC,IAC3C,kBAAC,IAAD,CAAOsC,KAAK,aAAaC,OAAK,EAACC,UAAWhB,U,GAtHlCnF,IAAMoB,YCCJgF,QACW,cAA7BvB,OAAOC,SAASuB,UAEe,UAA7BxB,OAAOC,SAASuB,UAEhBxB,OAAOC,SAASuB,SAASvE,MACvB,2D,MCXNxB,QAAQC,IAAI+F,+CAEZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxD,KAAK,SAAAyD,GACjCA,EAAaC,iB","file":"static/js/main.de3f7272.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst MyContext = React.createContext();\r\n\r\nexport default MyContext;\r\n","import React from \"react\";\r\nimport MyContext from \"../../MyContext\";\r\nimport { ListGroup, ListGroupItem } from 'reactstrap';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Folders extends React.Component {\r\n  render() {\r\n    return (\r\n      <ListGroup>\r\n        <MyContext.Consumer>\r\n          {context => {\r\n            console.log(context)\r\n            return context.folders.map(folder => (\r\n                <ListGroupItem key={folder.name}>\r\n                  <div>\r\n                <Link to={`/folder/${folder.id}`}>{folder.name} </Link>\r\n                </div>\r\n                <button\r\n                  className=\"Note__delete\"\r\n                  type=\"button\"\r\n                  onClick={() => context.deleteFolder(folder)}\r\n                >  Delete Folder</button>  \r\n              </ListGroupItem>\r\n            )\r\n            )  \r\n          }}\r\n        </MyContext.Consumer>\r\n      </ListGroup>\r\n\r\n    );\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        return { hasError: true };\r\n    }\r\n    \r\n    render() {\r\n        if (this.state.hasError) {\r\n            return (\r\n                <h2>Could not display this element!</h2>\r\n            );\r\n        }\r\n        return this.props.children;\r\n    }\r\n}","import React from 'react';\r\nimport Folders from \"./Folders\";\r\nimport { Link } from \"react-router-dom\";\r\nimport MyContext from \"../MyContext\"\r\nimport PropTypes from \"prop-types\";\r\nimport { ListGroup, ListGroupItem } from 'reactstrap';\r\nimport ErrorBoundary from '../ErrorBoundary';\r\n\r\nclass NotesContainer extends React.Component {\r\n  static contextType = MyContext;\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.match.params.id !== this.props.match.params.id) {\r\n      this.context.setFolderId(this.props.match.params.id)\r\n    }\r\n  }\r\n  render() {\r\n    const timestamp = Date.now();\r\n    const { context } = this;\r\n    return (\r\n      <ErrorBoundary>\r\n            <div className=\"d-flex\">\r\n              <div className=\"folders-pane\">\r\n                <Folders />\r\n                <ListGroupItem>\r\n                  <Link to=\"/folder/add\">\r\n                    <button type=\"button\">\r\n                      Add Folder\r\n                         </button>\r\n                  </Link>\r\n                </ListGroupItem>\r\n              </div>\r\n              <div className=\"notes-pane\">\r\n                <ListGroup>\r\n                  {context.notes.map(note =>\r\n                    <ListGroupItem key={note.id}>\r\n                      <div key={note.id}>\r\n                        <Link to={`/note/${note.id}`}>{note.note_name}</Link>\r\n                      </div>\r\n                      <div> {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit' }).format(timestamp)} </div>\r\n                      <button\r\n                        className='Note__delete'\r\n                        type='button'\r\n                        onClick={() => context.deleteNote(note)}\r\n                      > Delete Note </button>\r\n                    </ListGroupItem>\r\n                  )}\r\n                  <ListGroupItem>\r\n                    <Link to=\"/notes/add\">\r\n                      <button type=\"button\">\r\n                        Add Note\r\n                         </button>\r\n                    </Link>\r\n                  </ListGroupItem>\r\n                </ListGroup>\r\n              </div>\r\n            </div>\r\n      </ErrorBoundary>\r\n    )\r\n  }\r\n}\r\n\r\nNotesContainer.propTypes = {\r\n  value: PropTypes.string\r\n}\r\n\r\nexport default NotesContainer;\r\n","import React from \"react\";\r\nimport MyContext from \"./MyContext\";\r\nimport { ListGroup } from 'reactstrap';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n\r\n//change to class componeent, make api call \r\n//to back end and set it in the state \r\n// //pass this in fetch, create variable called note and put it in the state\r\n\r\n\r\n\r\nexport default class NoteInfo extends React.Component { \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      note: {}\r\n    };\r\n  }\r\n  componentDidMount(){\r\n  const note = this.props.match.params.noteId || null;\r\n  fetch(`http://localhost:8000/notes/${note}`)\r\n\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      this.setState({ \r\n          note: res\r\n      })\r\n  })\r\n  .catch((error => {\r\n      console.error(error);\r\n  }));\r\n}\r\n\r\n\r\nrender () {\r\nconst { note }  = this.state\r\nconsole.log (\"oneNote from noteinfo:\", note)\r\nconst timestamp = Date.now();\r\n  return (\r\n    <MyContext.Consumer>\r\n      {(context) => (\r\n        <div>\r\n          <Link to={`/`}>\r\n            <h3>Noteful Home</h3>\r\n          </Link>\r\n          <h3> {note.note_name} </h3>\r\n          <p> {note.content} </p>\r\n          <div> {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit' }).format(timestamp)} </div>\r\n\r\n          <Link to={`/`}>\r\n            {/* <button\r\n                className='Note__delete'\r\n                type='button'\r\n                onClick={() => context.deleteNote(note)}\r\n              > Delete Note </button> */}\r\n          </Link>\r\n          <button className=\"backButton\">\r\n            <div>\r\n              <Link to={`/`}>\r\n                Back\r\n                      </Link>\r\n            </div>\r\n          </button>\r\n        </div>\r\n      )}\r\n      </MyContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport MyContext from \"../MyContext\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class AddFolder extends React.Component {\r\n    handleAddFolder = (event, context) => {\r\n      event.preventDefault();\r\n      const newFolder = {\r\n        folder_name: event.target.name.value\r\n      };\r\n      fetch(`http://localhost:8000/folders`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(newFolder)\r\n      })\r\n      .then(res => {\r\n        if (!res.ok)\r\n          return res.json().then(e => Promise.reject(e))\r\n        return res.json()\r\n      })\r\n      .then((resp) => {\r\n        console.log(resp)\r\n        console.log(context)\r\n        window.location.href= '/'\r\n      })\r\n      .catch(error => {\r\n        console.error({ error })\r\n      }); \r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <MyContext.Consumer>\r\n            {(context) => (\r\n              <form className=\"createFolder\" onSubmit={(e) => this.handleAddFolder(e, context)}>\r\n                  <h2>Add Folder</h2>\r\n                  <div className=\"form-group\">\r\n                      <label htmlFor=\"name\">Name</label>\r\n                      <input type=\"text\" className=\"name\" name=\"name\" id=\"name\" required />\r\n                  </div>\r\n                  <div className=\"createFolderButtons\">\r\n                      <button type=\"submit\" className=\"buttonSubmit\">\r\n                          Save\r\n                      </button>\r\n                  </div>\r\n                  <div>\r\n                      <Link to={`/`}>\r\n                        back\r\n                      </Link>\r\n                    </div>\r\n              </form>\r\n            )}\r\n        </MyContext.Consumer>\r\n      );\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport MyContext from \"../MyContext\";\r\n\r\nexport default class AddNote extends React.Component {\r\n    handleAddNote = (event, context) => {\r\n      event.preventDefault();\r\n      const newNote = {\r\n        note_name: event.target.name.value,\r\n        content: event.target.content.value,\r\n        folder_id: event.target.folder.value\r\n      };\r\n      console.log(newNote)\r\n      fetch(`http://localhost:8000/notes`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(newNote)\r\n      })\r\n      .then(res => {\r\n        if (!res.ok)\r\n          return res.json().then(e => Promise.reject(e))\r\n        return res.json()\r\n      })\r\n      .then((resp) => {\r\n        console.log(resp)\r\n        console.log(context)\r\n        window.location.href = '/'\r\n\r\n      })\r\n      .catch(error => {\r\n        console.error({ error })\r\n      });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <MyContext.Consumer>\r\n          {(context) => (\r\n            console.log(\"from addnote\", context),\r\n            <form className=\"createNote\" onSubmit={(e) => this.handleAddNote(e, context)}>\r\n                Add Note\r\n                <div className=\"form-group\">\r\n                          <label htmlFor=\"folderSelect\">Folder Select</label>\r\n                          <select \r\n                              className=\"folderSelect\"\r\n                              aria-label=\"select folder\" \r\n                              name=\"folder\">\r\n                            { context.folders.map(folder => <option value={folder.id}> { folder.name } </option>) }\r\n                          </select>\r\n                      </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"name\">Name: {context.note_name} </label>\r\n                    <input type=\"text\" className=\"name\" name=\"name\" id=\"name\" required />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"content\"> Content: </label> \r\n                  <input type=\"text\" className=\"content\" name=\"content\" id=\"content\" required/>\r\n                </div>\r\n                <div className=\"createNoteButtons\">\r\n                    <button type=\"submit\" className=\"buttonSubmit\">\r\n                   SAVE\r\n                    </button>\r\n                </div>\r\n                <div className=\"backButton\">\r\n                  <div>\r\n                    <button>\r\n                    <Link to={`/`}>\r\n                      Back\r\n                    </Link>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n            </form>\r\n          )}\r\n    \r\n      </MyContext.Consumer>\r\n         )\r\n        }\r\n       }\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport NotesContainer from \"./components/NotesContainer\";\r\nimport NoteInfo from \"./components/NoteInfo\";\r\nimport AddFolder from \"./components/AddFolder\";\r\nimport MyContext from \"./components/MyContext\";\r\nimport AddNote from \"./components/AddNote/AddNote\"\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      folders: [],\r\n      notes: [],\r\n      folder_id: null\r\n    };\r\n  }\r\n\r\n  setFolderId = (folder_id) => {\r\n    console.log(folder_id)\r\n    this.setState({\r\n      folder_id\r\n    }, () => {\r\n      this.fetchNotesByFolderId()\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n   this.fetchFolders();\r\n   this.fetchNotesByFolderId();\r\n  }\r\n\r\n  fetchNotesByFolderId = () => {\r\n    const { folder_id } = this.state;\r\n    const url = folder_id ? `/folder/${folder_id}` : ``;\r\n    fetch(`http://localhost:8000/notes${url}`)\r\n      .then((resp) => {\r\n        if (!resp.ok)\r\n          return resp.json().then(e => Promise.reject(e));\r\n        return resp.json();\r\n      }).then(data => {\r\n        this.setState({\r\n          notes: data\r\n        })\r\n      })\r\n      .catch(error => {\r\n        console.error({ error });\r\n      });\r\n  }\r\n\r\n  fetchFolders = () => {\r\n    fetch(`http://localhost:8000/folders`)\r\n      .then((foldersResponse) => {\r\n        if (!foldersResponse.ok)\r\n          return foldersResponse.json().then(e => Promise.reject(e));\r\n        return foldersResponse.json();\r\n      })\r\n      .then((folders) => {\r\n        this.setState({\r\n          folders\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.error({ error });\r\n      });\r\n  }\r\n\r\n  handleNoteDelete = (note) => {\r\n    const noteId = note.id;\r\n    fetch(`http://localhost:8000/notes/${noteId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      },\r\n    })\r\n      .then(res => {\r\n        if (res.ok){\r\n          this.fetchFolders();\r\n          this.fetchNotesByFolderId()\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error({ error })\r\n      })\r\n  };\r\n\r\n\r\n  handleFolderDelete = (folder) => {\r\n    const folder_id = folder.id;\r\n    console.log ({folder_id}, \"deleted\")\r\n    fetch(`http://localhost:8000/folders/${folder_id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      },\r\n    })\r\n    .then(res => {\r\n      if (res.ok){\r\n        this.fetchFolders();\r\n        this.fetchNotesByFolderId()\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error({ error })\r\n    })\r\n};\r\n\r\n  \r\n\r\n  render() {\r\n    const { folders, notes } = this.state;\r\n    return (\r\n      <MyContext.Provider\r\n        value={{\r\n          notes,\r\n          folders,\r\n          deleteNote: this.handleNoteDelete,\r\n          deleteFolder: this.handleFolderDelete,\r\n          setFolderId: this.setFolderId\r\n        }}\r\n      >\r\n        <Router>\r\n          <Route path=\"/\" exact component={NotesContainer} />\r\n          <Route path=\"/folder/:id\" exact component={NotesContainer} />\r\n          <Route path=\"/note/:noteId\" exact component={NoteInfo} />\r\n          <Route path=\"/folder/add\" exact component={AddFolder} />\r\n          <Route path=\"/notes/add\" exact component={AddNote} />\r\n        </Router>\r\n      </MyContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconsole.log(process.env)\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}